@startuml
'https://plantuml.com/class-diagram


class Board {
    -board int[]
    -highLightMove : LinkedList<Integer>

    +Board() : Board

    +getPieces() : List<Piece>
    +getPieceFromPosition(position : int) : Piece
    +getHighLightMove() : LinkedList<Integer>
    +getBoard() : Board

    +calculateLegalMoves(piece : Piece) : LinkedList<Integer>
    +isPostionOccupied(position : int) : boolean
    +addPieceToBoard(piece : Piece) : void
    +removePieceToBoard(piece : Piece) : void
    +initialzeBoard() : void
    +validateMoveCommon(piece : Piece, newPos : int) : void
    +validateSimpleMove(piece : Piece, newPos : int) : void
    +validateAttackMove(piece : Piece, newPos : int) : void
    +validateCastleMove(piece : Piece, newPos : int) : void
    +isPathFree(piece : Piece, newPos : in) : boolean
    +move(piece : Piece, newPos : in) : void
    +getWhiteKing() : Piece
    +getBlackKing() : Piece
    +getKing(color : Color2) : King
    +getKingPosition(color : Color2) : int
    +isCheck(color : Color2) : boolean
    +anyValidMove(color : Color2) : boolean
    +willMoveResultInCheck(piece : Piece, newPos : int) : boolean

    +addObserver(observer : BoardObserver) : void
    +notifyObserver() : void
}

interface IBoardObserver {
    +updateBoardAndLegalMoves() : void
}

class AttackMove extends Move {
    +AttackMove(op : int, np : int, pi : Piece, pl : Player, b : Board) : AttackMove

    +execute() : void
    +undo(moveLog : MoveLog) : void
    -capture(Piece capturedPiece) : void
}

class castleMove extends Move {
    +CastleMove(op : int, np : int, pi : Piece, pl : Player, b : Board) : CastleMove

    +execute() : void
    +undo(moveLog : MoveLog) : void
    -canCastle(king : Piece, rook : Piece) : boolean
}

class SimpleMove extends Move {
    +SimpleMove(op : int, np : int, pi : Piece, pl : Player, b : Board) : SimpleMove

    +execute() : void
    +undo(moveLog : MoveLog) : void
}

interface IMove {
    +execute() : void
    +undo(moveLog : MoveLog) : void
    +getPiece() : Piece
    +getNewPos(): int
}


abstract class Move implements IMove{
    -oldPos : int
    -newPos : int

    +Move(op : int, np : int, pi : Piece, pl : Player, b : Board) : Move

    +getPiece() : Piece
    +getNewPos(): int
}

class MoveFactory {
    +MoveFactory(b : Board)
    +createMove(op : int, np : int, pi : Piece, pl : Player, b : Board) : IMove
}





class Bishop extends Piece{
    +Bishop(color : Color2, position : int) : Bishop

    +toString() : String
    +isValidMove(position : int) : boolean
}

class King extends Piece{
    -{static}nbrInstance : int
    -isChecked : boolean
    -hasMovedOnce : boolean

    -King(color : Color2, position : int)
    +{static}createInstance(color : Color2, position : int) : King

    +getIsChecked() : boolean
    +getHasMovedOnce() : boolean
    +setIsChecked(isChecked : boolean) : void
    +setIsChecked(hasMovedOnce : boolean) : void

    +toString() : String
    +isValidMove(position : int) : boolean
}

class Knight extends Piece {
    +Knight(color : Color2, position : int) : Knight

    +toString() : String
    +isValidMove(position : int) : boolean
}

class Pawn extends Piece{
    -isPromoted : boolean
    -isEmpassant : boolean
    -hasMovedOnce : boolean

    +Pawn(color : Color2, position : int) : Pawn

    +getHasMovedOnce() : boolean
    +setHasMovedOnce(hasMovedOnce) : void

    +toString() : String
    +isValidMove(position : int) : boolean
}

abstract class Piece {
    -position : int
    -value : float
    -pieceCode : int
    +board : int[]

    +Piece(color : Color2, position : int, value : float, pieceCode : int) : Piece

    +getPosition() : int
    +setPosition(position : int)
    +setStrategy(context : StrategyMovement) : void
    +getColor() : Color2
    +setValue(value : float) : void
    +getPieceCode() : int
    +getValue() : int

    +executeStrategy() : int[]
    +isWhite() : boolean
    +canCapturePiece(piece : Piece) : boolean
    +abstract isValidMove(newPosition : int) : boolean

}

class Queen extends Piece{
    +Queen(color : Color2, position : int) : Queen

    +toString() : String
    +isValidMove(position : int) : boolean
}

class Rook extends Piece{
    +Rook(color : Color2, position : int) : Rook

    +toString() : String
    +isValidMove(position : int) : boolean
}

class Player {
    -name : String
    -urTurn : boolean

    +Player(color : Color2, name : String) : Player

    +setName(name : String) : void
    +getName() : String
    +getColor() : Color2
    +setUrTurn(boolean turn) : void
    +isUrTurn() : boolean
    +changeTurn() : void
    +getCapturedPieces() : List<Piece>
    +addCapturedPieces(piece : Piece) : void
    +move(piece : Piece, newPosition : int) : void
    +isWhite() : boolean

    +addObserver(IBoardObserver) : void
    +notifyObserver() : void
    +addObserverGame(IBoardObserverGame) : void
    +notifyObserverGame() : void
    +notifyObserverCapturePiece() : void

    +toString() : String
}

interface IPlayerObserver {
    +updatePlayerName() : void
}

interface IPlayerObserverGame {
    +updateBoard() : void
    +updateTakenPiecePanel() : void
}

enum Color2 {
    WHITE
    BLACK
}

interface IObserverMoveLog {
    updateGameHistoryPanel() : void
}

class MoveLog {
    +MoveLog(board : Board)

    +getMoves() : List<IMove>

    +addMove(move : IMove) : void
    +size() : int
    +clear() : void
    +removeMove(move : Move)

    +addObserver(obs : IObserverMoveLog) : void
    +notifyObserver() : void
}

class PieceFactory {
    -PieceFactory()
    +createInstance() : PieceFactory
    +createPawn() : Piece
    +createKnight() : Piece
    +createBishop() : Piece
    +createRook() : Piece
    +createQueen() : Piece
    +createKing() : Piece
}

class StrategyMovementRook implements StrategyMovement {
    +offset() : int[]
}
class StrategyMovementBishop implements StrategyMovement {
    +offset() : int[]
}
class StrategyMovementKing implements StrategyMovement {
    +offset() : int[]
}
class StrategyMovementKnight implements StrategyMovement {
    +offset() : int[]
}
class StrategyMovementPawn implements StrategyMovement {
    +offset() : int[]
}
class StrategyMovementQueen implements StrategyMovement {
    +offset() : int[]
}
interface StrategyMovement {
    +offset() : int[]
}

Piece "1" *-- "1" Color2 : contains
Piece "1" o-- "1" StrategyMovement : contains

Board "1" o-- "*" Piece : contains
Board "1" o-- "*" IBoardObserver : contains

Player "1" o-- "*" Piece : contains
Player "1" *-- "1" Color2 : contains
Player "1" o-- "*" IPlayerObserver : contains obs
Player "1" o-- "*" IPlayerObserverGame : contains ObsGame

PieceFactory "1" *-- "*" Board : instantiate
PieceFactory "1" *-- "1" PieceFactory : contains

MoveFactory "1" o-- "1" Board : instantiate

MoveLog "1" o-- "*" IMove : contains
MoveLog "1" o-- "*" IObserverMoveLog : contains

Move "1" o-- "1" Board : contains
Move "1" o-- "1" Player : contains
Move "1" o-- "1" Piece : contains




@enduml