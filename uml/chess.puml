@startuml
'https://plantuml.com/class-diagram

class Pawn extends Piece
class Knight extends Piece
class Bishop extends Piece
class Rook extends Piece
class Queen extends Piece
class King extends Piece
interface StrategyMovement

class GameController {

}
class GameManager{
    -whitePlayer : Player
    -blackPlayer : Player
    -lastCommand : ICommand
    -commandFactory : CommandFactory
    -board : Board

    +GameManager()

    +getCurrentPlayer() : Player
    +setBlackTurn(boolean turn) : void
    +setWhiteTurn(boolean turn) : void

    +isCheckMate() : boolean
    +isPat() : boolean
    +execute(int oldPos, int newPos, Piece piece, Player player, Board board) : void
    +undoCommand() : void
}






class Board {
    -board int[]
    -pieces : List<Piece>

    +Board() : Board

    +getPieces() : List<Piece>
    +getPieceFromPosition(position : int) : Piece

    +calculateLegalMoves(Piece piece) : LinkedList<Integer>
    +isPostionOccupied(position : int) : boolean
    +addPieceToBoard(Piece piece) : void
    +removePieceToBoard(piece : Piece) : void
    +initialzeBoard() : void
    +validateMoveCommon(Piece piece, int newPos) : void
    +validateSimpleMove(Piece piece, int newPos) : void
    +validateAttackMove(Piece piece, int newPos) : void
    +validateCastleMove(Piece piece, int newPos) : void
    +isPathFree(Piece piece, int newPos) : boolean
    +isPathFreeVertical(Piece piece, int newPos) : boolean
    +isPathFreeDiagonal(Piece piece, int newPos) : boolean
    +move(Piece piece, int position) : void
    +getWhiteKing() : Piece
    +getBlackKing() : Piece
    +getKing(Color color) : King
    +isCheck(Color color) : boolean
    +anyValidMove(Color color) : boolean

    +isPat(color : Color)
    +moveWillCauseCheck(piece : Piece, newPosition : int)


    +addObserver(observer : BoardObserver) : void
    +notifyObserver() : void
}

class AttackMove extends Move {
    +AttackMove(int op, int np, Piece pi, Player pl, Board b) : AttackMove

    +execute() : void
    +undo() : void
    -capture(Piece capturedPiece) : void
}

class castleMove extends Move {
    +CastleMove(int op, int np, Piece pi, Player pl, Board b) : CastleMove

    +execute() : void
    +undo() : void
    -canCastle(Piece king, Piece rook) : boolean
}

class SimpleMove extends Move {
    +SimpleMove(int op, int np, Piece pi, Player pl, Board b) : SimpleMove

    +execute() : void
    +undo() : void
}

interface IMove
{
    +execute() : void
    +undo() : void
}

abstract class Move {
    -oldPos : int
    -newPos : int
    -piece : Piece
    -player : Player
    -board : Board

    +Move(int op, int np, Piece pi, Player pl, Board b) : Move
}

class MoveFactory {
    -board : Board

    +MoveFactory(Board b)
    +createMove(int oldPos, int newPos, Piece piece, Player player, Board board) : IMove
}





class Bishop {
}

class King {
    -instance : King
    -isChecked : boolean
    -hasMovedOnce : boolean
    -King()
    +createInstance() : King
}

class Knight {
}

class Pawn {
    -isPromoted : boolean
    -isEmpassant : boolean
    -hasMovedOnce : boolean
}

class Piece {
    -color : Color
    -position : int
    -context : StrategyMovement
    -value : float
    -pieceCode : int
    +board : int[]

    +Piece(Color2 color, int position, float value, int pieceCode) : Piece

    +getPosition() : int
    +setPosition(position : int)
    +setStrategy(StrategyMovement context) : void
    +getColor() : Color
    +setValue(float value) : void
    +setPieceCode(int value) : void
    +getPieceCode() : int
    +getValue() : int

    +executeStrategy() : int[]
    +isWhite : boolean
    +canCapturePiece(piece : Piece) : boolean
    +isValidMove(newPosition : int) : boolean

}

class Queen {
}

class Rook {
}

class Player {
    -name : String
    -urTurn : boolean
    -capturedPiece : List<Piece>
    -color : Color

    +Player(Color : color, String : name) : Player

    +getColor() : Color
    +setUrTurn(boolean turn) : void
    +isUrTurn() : boolean
    +changeTurn() : void
    +getCapturedPieces() : List<Piece>
    +addCapturedPieces(piece : Piece) : void
    +move(piece : Piece, newPosition : int) : void
    +isWhite() : boolean
}

enum Color {
    WHITE
    BLACK
}

class PieceFactory {
    -instance : PieceFactory

    -PieceFactory()
    +createInstance() : PieceFactory
    +createPawn() : Piece
    +createKnight() : Piece
    +createBishop() : Piece
    +createRook() : Piece
    +createQueen() : Piece
    +createKing() : Piece
}






Piece "1" *-- "1" StrategyMovement : contains
Piece "1" *-- "1" Color : contains
Player "1" *-- "1" Color : contains

StrategyMovement <|-- StrategyMovementPawn
StrategyMovement <|-- StrategyMovementKnight
StrategyMovement <|-- StrategyMovementBishop
StrategyMovement <|-- StrategyMovementRook
StrategyMovement <|-- StrategyMovementQueen
StrategyMovement <|-- StrategyMovementKing
Player --o Piece
Board --* CommandFactory
CommandFactory --[dashed]-> ICommand
ICommand --* GameManager
CommandFactory --* GameManager
Board --* GameManager
Player --* GameManager
CommandMaker *-- Board
CommandMaker *-- Piece
AttackCommand --[dashed]-> CommandMaker
MoveCommand --[dashed]-> CommandMaker
RookKingCommand --[dashed]-> CommandMaker

@enduml